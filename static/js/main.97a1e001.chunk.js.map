{"version":3,"sources":["Context/ThemeContext.js","Colors.js","Toggle.jsx","Quotes.js","MainWithFunction.js","App.js","reportWebVitals.js","index.js"],"names":["ThemeContext","React","createContext","AppTheme","black","textColor","backgroundColor","red","toggleStyle","cursor","Toggle","useContext","themeMode","setThemeMode","style","onClick","Quotes","state","data","axios","get","then","json","setState","this","quote","Component","Main","theme","currentTheme","padding","color","App","themeHook","useState","Provider","value","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8KAOeA,G,MAFMC,IAAMC,cAAc,CAAC,MAAO,gBCOlCC,EAZE,CAChBC,MAAO,CACLC,UAAW,UACXC,gBAAiB,WAEnBC,IAAK,CACHF,UAAW,UACXC,gBAAiB,Y,eCJdE,EAAc,CAClBC,OAAQ,WAkBKC,EAhBA,WACb,MAAkCC,qBAAWX,GAA7C,mBAAOY,EAAP,KAAkBC,EAAlB,KACA,OACE,qBACEC,MAAON,EACPO,QAAS,WACPF,EAA2B,QAAdD,EAAsB,QAAU,QAHjD,SAME,+BACE,uD,iDCbaI,E,4MACnBC,MAAQ,CAAEC,KAAM,I,uDAEhB,WAAqB,IAAD,OAClBC,IACGC,IAAI,oDACJC,MAAK,SAACC,GACL,EAAKC,SAAS,CAAEL,KAAMI,EAAKJ,Y,oBAIjC,WACE,IAAMA,EAAOM,KAAKP,MAAMC,KACxB,OACE,8BACC,4BAAIA,EAAKO,c,GAfoBC,aCqBrBC,EAlBF,WACX,IAAMC,EAAQjB,qBAAWX,GAAc,GACjC6B,EAAe1B,EAASyB,GAC9B,OACE,uBACEd,MAAO,CACLgB,QAAS,QACTxB,gBAAgB,GAAD,OAAKuB,EAAavB,iBACjCyB,MAAM,GAAD,OAAKF,EAAaxB,YAJ3B,UAOE,cAAC,EAAD,IACA,cAAC,EAAD,QCFS2B,MAZf,WACE,IAAMC,EAAYC,mBAAS,OAE3B,OACE,cAAC,EAAaC,SAAd,CAAuBC,MAAOH,EAA9B,SACE,8BACE,cAAC,EAAD,SCEOI,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBlB,MAAK,YAAkD,IAA/CmB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.97a1e001.chunk.js","sourcesContent":["import React from \"react\";\n\n\n\n\nconst ThemeContext = React.createContext([\"red\", () => {}]);\n\nexport default ThemeContext;\n","const AppTheme = {\n\tblack: {\n\t\t\ttextColor: \"#FF0000\",\n\t\t\tbackgroundColor: \"#000000\"\n\t},\n\tred: {\n\t\t\ttextColor: \"#000000\",\n\t\t\tbackgroundColor: \"#FF0000\"\n\t}\n}\n\n\nexport default AppTheme;\n","import React, { useContext } from \"react\";\nimport ThemeContext from \"./Context/ThemeContext\";\n\nconst toggleStyle = {\n  cursor: \"pointer\",\n};\nconst Toggle = () => {\n  const [themeMode, setThemeMode] = useContext(ThemeContext);\n  return (\n    <div\n      style={toggleStyle}\n      onClick={() => {\n        setThemeMode(themeMode === \"red\" ? \"black\" : \"red\");\n      }}\n    >\n      <span>\n        <button>Toggle Color</button>\n      </span>\n    </div>\n  );\n};\n\nexport default Toggle;\n","import React, { Component } from \"react\";\nimport axios from \"axios\";\n\nexport default class Quotes extends Component {\n  state = { data: [] };\n\n  componentDidMount() {\n    axios\n      .get(\"http://quotes.stormconsultancy.co.uk/random.json\")\n      .then((json) => {\n        this.setState({ data: json.data });\n      });\n  }\n\n  render() {\n    const data = this.state.data;\n    return (\n      <div>\n       <p>{data.quote}</p>\n      </div>\n    );\n  }\n}\n","import React, { useContext } from \"react\";\nimport ThemeContext from \"./Context/ThemeContext\";\nimport AppTheme from \"./Colors\";\nimport Toggle from \"./Toggle\";\nimport Quotes from \"./Quotes\"\n\nconst Main = () => {\n  const theme = useContext(ThemeContext)[0];\n  const currentTheme = AppTheme[theme];\n  return (\n    <main\n      style={{\n        padding: \"15rem\",\n        backgroundColor: `${currentTheme.backgroundColor}`,\n        color: `${currentTheme.textColor}`,\n      }}\n    >\n      <Toggle />\n      <Quotes/>\n     \n    </main>\n  );\n};\n\nexport default Main;\n","import React, { useState } from \"react\";\nimport ThemeContext from \"./Context/ThemeContext\";\nimport Main from \"./MainWithFunction\";\n\nfunction App() {\n  const themeHook = useState(\"red\");\n\n  return (\n    <ThemeContext.Provider value={themeHook}>\n      <div>\n        <Main />\n      </div>\n    </ThemeContext.Provider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}